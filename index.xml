<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Embedded notes</title>
    <link>https://tenbaht.github.io/</link>
    <description>Recent content on Embedded notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; 2018-2020 - Michael Mayer</copyright>
    <lastBuildDate>Fri, 21 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tenbaht.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My projects</title>
      <link>https://tenbaht.github.io/about/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tenbaht.github.io/about/</guid>
      <description>I am a developer for embedded systems. I work on hardware as well as on low-level software.
My current projects (apart from our two little sons, which don&amp;rsquo;t leave much time for other things right now):</description>
    </item>
    
    <item>
      <title>Compiling GrblControl in a Container</title>
      <link>https://tenbaht.github.io/posts/compiling-grblcontrol-in-a-container/</link>
      <pubDate>Wed, 07 Oct 2020 10:47:40 +0200</pubDate>
      
      <guid>https://tenbaht.github.io/posts/compiling-grblcontrol-in-a-container/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://tenbaht.github.io/images/compiling-candle.png&#34; alt=&#34;Compiling GrblControl in a Container&#34;&gt;&lt;/p&gt;
&lt;p&gt;Using a container for a build environment can help to avoid cluttering up
the filesystem of the local machine. This approach can be useful for
one-time builds with lots of build dependencies which are not used for any
other work.&lt;/p&gt;
&lt;p&gt;Since there is no precompiled 64 bit binary for
&lt;a href=&#34;https://github.com/Denvi/Candle&#34;&gt;Candle&lt;/a&gt; (formerly known as grblControl) I
had to compile it myself. But since I never use the QT libraries otherwise
it would pull in more than 600MB of libraries and header files which I would
have to clean up afterwards in order to keep my system as lean as possible.&lt;/p&gt;
&lt;p&gt;A perfect opportunity to find out why containers might be useful!
I am using podman-rootless, but plain old docker would work exactly the same
way. Just replace &lt;code&gt;podman&lt;/code&gt; with &lt;code&gt;docker&lt;/code&gt; in the following commands.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Installing Onetab in Palemoon</title>
      <link>https://tenbaht.github.io/posts/installing-onetab-in-palemoon/</link>
      <pubDate>Fri, 24 Jul 2020 14:18:20 +0200</pubDate>
      
      <guid>https://tenbaht.github.io/posts/installing-onetab-in-palemoon/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://tenbaht.github.io/images/titelbild.jpg&#34; alt=&#34;Installing Onetab in Palemoon&#34;&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://tenbaht.github.io/images/installing-onetab-in-palemoon.png&#34;
         alt=&#34;Onetab 1.9 running with palemoon 28.9.0.2&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Onetab 1.9 running with palemoon 28.9.0.2&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The amazing and absolutely essential onetab extension is only available for
firefox and chrome, not for the stripped-down firefox version palemoon. But
with the help of archive.org and a text editor it is possible to install an
older (but fully functional) version. A pre-patched add-on file is included
in this posting.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Converting an Existing Linux Installation to UEFI Boot</title>
      <link>https://tenbaht.github.io/posts/converting-an-existing-linux-installation-to-uefi-boot/</link>
      <pubDate>Wed, 09 Oct 2019 13:54:54 +0200</pubDate>
      
      <guid>https://tenbaht.github.io/posts/converting-an-existing-linux-installation-to-uefi-boot/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://tenbaht.github.io/images/efiboot.png&#34; alt=&#34;Converting an Existing Linux Installation to UEFI Boot&#34;&gt;&lt;/p&gt;
&lt;p&gt;Due to a hardware failure I had to move my Linux installation to a new
Laptop that was configured for UEFI boot instead of the conventional BIOS
boot.&lt;/p&gt;
&lt;p&gt;Transfering the partition data from the old to the new laptop is
straight forward. The problem is: How to add the existing installation to
the UEFI boot menu?&lt;/p&gt;
&lt;p&gt;As it turns out, this task is way easier than expected.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating from avra to avr-as</title>
      <link>https://tenbaht.github.io/posts/migrating-from-avra-to-avr-as/</link>
      <pubDate>Mon, 04 Feb 2019 15:02:26 +0100</pubDate>
      
      <guid>https://tenbaht.github.io/posts/migrating-from-avra-to-avr-as/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://tenbaht.github.io/images/migrating-avra-title.png&#34;
         alt=&#34;assemble avra projects with avr-as&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;assemble avra projects with avr-as&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The main advantage of avr-as over avra is the possibility to generate
linkable .o object files that can be mixed with C files.&lt;/p&gt;
&lt;p&gt;Unfortunatly, the syntax differs slightly between these two assemblers. And
it turns out that the syntax differences are big enough to make the
conversion of existing source code a non-trivial task that tends to take way
longer than expected.&lt;/p&gt;
&lt;p&gt;To save others some troubles in similar situations, here are my findings
about &lt;a href=&#34;https://github.com/tenbaht/servo-motor-controller&#34;&gt;porting the SMC3&lt;/a&gt;
project from avra to avr-as/gas.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PXE Booting Puppy Linux</title>
      <link>https://tenbaht.github.io/posts/pxe-booting-puppy-linux/</link>
      <pubDate>Fri, 19 Oct 2018 19:18:05 +0200</pubDate>
      
      <guid>https://tenbaht.github.io/posts/pxe-booting-puppy-linux/</guid>
      <description>PXE booting Puppy Linux is actually quite easy if you already have a PXE server up and running. The idea is simple: Add the *.sfs file containing the file system into the initrd and use this for booting.</description>
    </item>
    
    <item>
      <title>freetz auf einer Fritzbox 3170 installieren</title>
      <link>https://tenbaht.github.io/posts/compiling-freetz/</link>
      <pubDate>Tue, 02 Oct 2018 22:16:28 +0200</pubDate>
      
      <guid>https://tenbaht.github.io/posts/compiling-freetz/</guid>
      <description>Meine aktuelle Fritzbox macht Probleme, deshalb will ich die uralte 3170 zumindest vorübergehend wieder in Betrieb nehmen. Freetz bietet mehr Möglichkeiten als die normale Firmware, also mal ausprobieren.
freetz-Image compilieren Es gibt keine fertigen Images, sondern es muss erst selbst aus den svn-Sourcen compiliert werden.</description>
    </item>
    
    <item>
      <title>Binaries for plotkicadsch</title>
      <link>https://tenbaht.github.io/posts/binaries-for-plotkicadsch/</link>
      <pubDate>Fri, 21 Sep 2018 22:29:17 +0200</pubDate>
      
      <guid>https://tenbaht.github.io/posts/binaries-for-plotkicadsch/</guid>
      <description>Compiling plotkicadsch from source is a little bit complicated. To make your life easier I uploaded my compiled binaries here:
 for Mint 19/Ubuntu 18.04, 64 bit  Unpack the file to a convinient location like /usr/local/bin:</description>
    </item>
    
    <item>
      <title>SMD reflow oven: lessons learned</title>
      <link>https://tenbaht.github.io/posts/lessons-learned.de/</link>
      <pubDate>Mon, 02 Apr 2018 12:05:00 +0200</pubDate>
      
      <guid>https://tenbaht.github.io/posts/lessons-learned.de/</guid>
      <description>(Sorry, no english version yet.)
Der Ofen funktioniert und tut genau das, was er soll. Gut. Aber der Weg dorthin war länger und umständlicher als er hätte sein müssen.
Was ich heute anders machen würde Immer eine eigene Platine Am Ende sehe ich mich wieder bestätigt: Niemals ohne richtige Platine.</description>
    </item>
    
    <item>
      <title>SMD reflow oven from the dumpster</title>
      <link>https://tenbaht.github.io/posts/reflow-oven/</link>
      <pubDate>Sun, 01 Apr 2018 00:02:36 +0200</pubDate>
      
      <guid>https://tenbaht.github.io/posts/reflow-oven/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://tenbaht.github.io/images/reflow-800.jpg&#34; alt=&#34;my reflow oven&#34;&gt;&lt;/p&gt;
&lt;p&gt;A while ago I found a toaster oven in the trash and now I converted it into
a reflow oven for soldering of SMD circuit boards.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMD-Reflow-Ofen vom Sperrmüll</title>
      <link>https://tenbaht.github.io/posts/reflow-oven.de/</link>
      <pubDate>Sun, 01 Apr 2018 00:02:36 +0200</pubDate>
      
      <guid>https://tenbaht.github.io/posts/reflow-oven.de/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://tenbaht.github.io/images/reflow-800.jpg&#34; alt=&#34;Mein SMD-reflow-Ofen&#34;&gt;&lt;/p&gt;
&lt;p&gt;Umbau eines einfachen Mini-Backofens in einen Reflow-Ofen zum Löten von
SMD-Platinen.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>